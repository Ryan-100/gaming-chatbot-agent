import {
  BaseQueryApi,
  createApi,
  FetchArgs,
  fetchBaseQuery,
} from '@reduxjs/toolkit/query/react';
import { API_URL } from '../lib/api';
import { APIResponse, IOptions } from '../types/base.types';
import { getToken } from '../utils/auth';

const baseQuery = fetchBaseQuery({
  baseUrl: API_URL,
  prepareHeaders: (headers) => {
    const token = getToken();
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
    }
  },
});

const baseQueryWithReAuth = async (
  args: string | FetchArgs,
  api: BaseQueryApi,
  extraOptions: any
) => {
  const result = await baseQuery(args, api, extraOptions);
  if (result.error?.status === 401) {
    window.location.href = process.env.NEXT_PUBLIC_FRONTEND_URL + '/login';
  }
  return result;
};

export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: baseQueryWithReAuth,
  tagTypes: [
    'ACTIVE_POCKET_MONEY',
    'EXPIRE_POCKET_MONEY',
    'UPCOMING_POCKET_MONEY',
    'POCKET_MONEY_DETAILS',
    'POCKET_MONEY_TRANSACTIONS',
    'PM_PLAYER_LIST',
    'ACTIVE_BONUS',
    'ACTIVE_DEPOSIT_BONUS',
    'EXPIRE_DEPOSIT_BONUS',
    'DEPOSIT_BONUS_DETAILS',
    'ACTIVE_FIRST_TIME_DEPOSIT_BONUS',
    'EXPIRE_FIRST_TIME_DEPOSIT_BONUS',
    'FIRST_TIME_DEPOSIT_BONUS_DETAILS',
    'REGISTER_BONUS_DETAILS',
    'ACTIVE_REGISTER_BONUS',
    'EXPIRE_REGISTER_BONUS',
    'ME',
    'LANGUAGES',
    'SPIN_BONUS',
    'SPIN_SETTING',
    'SPIN_RULES',
    'SPIN_HISTORY',
    'SPIN_HISTORY_DETAILS',
    'SPIN_MAINTAIN',
    'PROFILE',
    'OPTIONS',
    'EXAMPLES',
    'PAYMENT_CATEGORY',
    'PAYMENT_CATEGORY_DETAIL',
    'PAYMENT_TYPE',
    'PAYMENT_TYPE_DETAIL',
    'PAYMENT_MANAGEMENT',
    'PAYMENT_MANAGEMENT_DETAIL',
    'PLAYER_LEVEL',
    'PLAYER_LEVEL_DETAIL',
    'DEPOSIT_ADMIN',
    'DEPOSIT_ADMIN_DETAIL',
    'WITHDRAW_ADMIN',
    'WITHDRAW_ADMIN_DETAIL',
    'EXCHANGE_RATE_WITHDRAW',
    'EXCHANGE_RATE_DEPOSIT',
    'EXCHANGE_CURRENCY',
    'TRANSACTIONS_WITHDRAW',
    'TRANSACTIONS_WITHDRAW_DETAIL',
    'TRANSACTIONS_DEPOSIT',
    'TRANSACTIONS_DEPOSIT_DETAIL',
    'CRYPTO_NETWORK',
    'CRYPTO_NETWORK_DETAIL',
    'FILE_UPLOAD',
    'SETTING_SUPPORT_INTRO',
    'SETTING_CONTACT',
    'SETTING_CONTACT_DETAIL',
    'SETTING_SOCIAL_MEDIA',
    'SETTING_SOCIAL_MEDIA_DETAIL',
    'APPLICATION_SETTINGS',
    'OTP_SETTINGS',
    'PAYMENT_SETTINGS',
    'SYSTEM_MAINTENANCE',
    'LEGAL',
    'NOTIFICATIONS',
    'NOTIFICATION_DETAIL',
    'NOTIFICATION_APP_FUNCTION',
    'DEPOSIT_DASHBOARD_DETAIL_TABLE',
    'DEPOSIT_DASHBOARD_REQUESTS',
    'DEPOSIT_RECORD_HISTORY',
    'DEPOSIT_RECORD_HISTORY_DETAIL',
    'DEPOSIT_AUTO_TOP_UP',
    'WITHDRAW_DASHBOARD',
    'WITHDRAW_REPORT',
    'WITHDRAW_REPORT_DETAIL',
    'TRANSACTIONS_BY_PLAYER',
    'SAME_IP_USERS',
    'DOWNLOAD_GUIDE',
    'LOGIN_GUIDE',
    'REGISTER_GUIDE',
    'PLAYERS',
    'TOP_WINNING_PLAYERS',
    'PLAYER_DETAIL',
    'BOT_MANAGEMENT',
    'SPLASH_SCREEN',
    'SPLASH_ADS',
    'ONBOARDING',
    'PROFILE',
    'BONUS_HISTORY',
    'GAME_ACTIVITY',
    'CHAT_ROOMS_LIST',
    'PIN_CHAT',
    'ROLES',
    'CUSTOM_ROLES',
    'ROLE_DETAIL',
    'PERMISSIONS',
    'SERVICE_ADMIN',
    'SERVICE_ADMIN_DETAIL',
    'CUSTOM_ADMIN',
    'CUSTOM_ADMIN_DETAIL',
    'MAIN_GAME',
    'MAIN_GAME_DETAIL',
    'CHILD_GAME',
    'CHILD_GAME_DETAIL',
    'TOP_WINNING_GAMES',
    'TOP_WINNING_GAME_WINNERS',
    'HOT_GAMES',
    'DEPOSIT_WITHDRAW_AMOUNT',
    'DEPOSIT_WITHDRAW_AMOUNT_DETAIL',
    'REPORT',
    'REPORT_DASHBOARD',
    'REPORT_PAYMENT',
    'REPORT_CRYPTO',
    'REPORT_CRYPTO_CATEGORY',
    'REPORT_CRYPTO_DEPOSIT_ACCOUNT',
    'REPORT_CRYPTO_WITHDRAW_ACCOUNT',
    'REPORT_DEPOSIT_ADMIN',
    'REPORT_DEPOSIT_ADMIN_DETAIL',
    'REPORT_DEPOSIT_ADMIN_TRANSACTION',
    'REPORT_WITHDRAW_ADMIN',
    'REPORT_WITHDRAW_ADMIN_DETAIL',
    'REPORT_WITHDRAW_ADMIN_TRANSACTION',
    'REPORT_USER',
    'TRANSACTIONS_DEPOSIT_BONUS',
    'TRANSACTIONS_REGISTER_BONUS',
    'TRANSACTIONS_POCKET_MONEY',
    'TRANSACTIONS_GAMES',
    'GAME_TRACKING_PANEL',
    'GAME_TRACKING_PANEL_DETAIL',
    'THIRD_PARTY_BALANCE',
    'PLAYER_MEDIA',
  ],
  endpoints: (builder) => ({
    getOptions: builder.query<APIResponse<Array<IOptions>>, string>({
      query: (query: any) => query,
      providesTags: ['OPTIONS'],
    }),
  }),
});

export const { useGetOptionsQuery } = apiSlice;
